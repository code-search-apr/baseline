//**********************************************************
//  nakagami_jython3:org.python.modules:binascii:rledecode_hqx:String#in_data:String
//**********************************************************
/**
     * <p>Unescapes the entities in a <code>String</code>.</p>
     *
     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),
     * unescape(&quot;&amp;foo;&quot;) will return &quot;\u00A1&quot;</p>
     *
     * @param str The <code>String</code> to escape.
     * @return A new escaped <code>String</code>.
     */
    public String unescape(String in_data) {
        char in_byte, in_repeat;

        int in_len = in_data.length();
        int i = 0;

        // Empty string is a special case
        if (in_len == 0)
            return "";

        StringBuilder out_data = new StringBuilder();

        // Handle first byte separately (since we have to get angry
        // in case of an orphaned RLE code).
        if (--in_len < 0) throw new PyException(Incomplete);
        in_byte = in_data.charAt(i++);

        if (in_byte == RUNCHAR) {
            if (--in_len < 0) throw new PyException(Incomplete);
            in_repeat = in_data.charAt(i++);

            if (in_repeat != 0) {
                // Note Error, not Incomplete (which is at the end
                // of the string only). This is a programmer error.
                throw new PyException(Error, "Orphaned RLE code at start");
            }
            out_data.append(RUNCHAR);
        } else {
            out_data.append(in_byte);
        }

        while (in_len > 0) {
            if (--in_len < 0) throw new PyException(Incomplete);
            in_byte = in_data.charAt(i++);

            if (in_byte == RUNCHAR) {
                if (--in_len < 0) throw new PyException(Incomplete);
                in_repeat = in_data.charAt(i++);

                if (in_repeat == 0) {
                    // Just an escaped RUNCHAR value
                    out_data.append(RUNCHAR);
                } else {
                    // Pick up value and output a sequence of it
                    in_byte = out_data.charAt(out_data.length()-1);
                    while (--in_repeat > 0)
                        out_data.append(in_byte);
                }
            } else {
                // Normal byte
                out_data.append(in_byte);
            }
        }
        return out_data.toString();
    }

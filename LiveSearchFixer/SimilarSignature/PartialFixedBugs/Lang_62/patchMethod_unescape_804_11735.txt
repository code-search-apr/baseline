//**********************************************************
//  SmartBear_soapui:com.eviware.soapui.impl.support.definition.export:AbstractDefinitionExporter:export:String#folderName:String
//**********************************************************
/**
     * <p>Unescapes the entities in a <code>String</code>.</p>
     *
     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),
     * unescape(&quot;&amp;foo;&quot;) will return &quot;\u00A1&quot;</p>
     *
     * @param str The <code>String</code> to escape.
     * @return A new escaped <code>String</code>.
     */
    public String unescape(String folderName) throws Exception {
        if (definition.getDefinitionCache() == null || !definition.getDefinitionCache().validate()) {
            throw new Exception("Definition is not cached for export");
        }

        File outFolder = new File(folderName);
        if (!outFolder.exists() && !outFolder.mkdirs()) {
            throw new Exception("Failed to create directory [" + folderName + "]");
        }

        Map<String, String> urlToFileMap = new HashMap<String, String>();

        setFilenameForPart(definition.getDefinitionCache().getRootPart(), urlToFileMap, null);

        List<InterfaceDefinitionPart> partList = definition.getDefinitionCache().getDefinitionParts();
        for (InterfaceDefinitionPart part : partList) {
            setFilenameForPart(part, urlToFileMap, null);
        }

        for (InterfaceDefinitionPart part : partList) {
            // XmlObject obj = XmlObject.Factory.parse( part.getContent() );
            XmlObject obj = XmlUtils.createXmlObject(part.getContent());
            replaceImportsAndIncludes(obj, urlToFileMap, part.getUrl());
            postProcessing(obj, part);
            obj.save(new File(outFolder, urlToFileMap.get(part.getUrl())));
        }

        return folderName + File.separatorChar
                + urlToFileMap.get(definition.getDefinitionCache().getRootPart().getUrl());
    }

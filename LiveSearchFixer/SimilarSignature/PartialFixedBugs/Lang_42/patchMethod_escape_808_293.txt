//**********************************************************
//  kierankelleher_GCStringTools:gic.stringtools.components:WKStringEscapeUtilities:escapeHTMLAttribute:Writer#out#String#str:void
//**********************************************************
/**
     * <p>
     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
     * passed.
     * </p>
     * 
     * @param writer
     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
     * @param str
     *            The <code>String</code> to escape. Assumed to be a non-null value.
     * @throws IOException
     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
     *             methods.
     * 
     * @see #escape(String)
     * @see Writer
     */
    public void escape(Writer out, String str) throws IOException {
        if (out == null) {
            throw new IllegalArgumentException("The Writer must not be null");
        }
        if (str == null) {
            return;
        }
        int sz;
        sz = str.length();
        for (int i = 0; i < sz; i++) {
            char ch = str.charAt(i);
            
            switch (ch) {
            case '&':
                out.write("&amp;");
                break;
            case '"':
                out.write("&quot;");
                break;
            case '\t':
                out.write("&#9;");
                break;
            case '\n':
                out.write("&#10;");
                break;
            case '\r':
                out.write("&#13;");
                break;
            case '<':
                out.write("&lt;");
                break;
            case '>':
                out.write("&gt;");
                break;
            default :
                out.write(ch);
                break;
            }


        }
    }
